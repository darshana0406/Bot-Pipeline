// apply plugin: 'java'

// repositories {
//     jcenter()
// }

// dependencies {
//     implementation 'org.json:json:20210307'
// }

// // if (MyChoiceParameter == 'Option 1') {
// //     return "task1"
// // } else if (MyChoiceParameter == 'Option 2') {
// //     return "task2"
// // }


// task runJava(type: JavaExec) {
//     main = 'ExportENV' // Replace 'HelloWorld' with the name of your main class if different
//     classpath = sourceSets.main.runtimeClasspath
    
//     doFirst  {       

//         def env = project.getProperty('env')
//         def exportType = project.getProperty('exportType')
//         println "Chosen Value of ENV : $env"
//         println "Chosen Value of Export Type : $exportType"
//         args exportType, env
       
//     }
    
// }
// task runJavaI(type: JavaExec) {
//     main = 'UploadImportENV' // Replace 'HelloWorld' with the name of your main class if different
//     classpath = sourceSets.main.runtimeClasspath
// }


apply plugin: 'java'

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
        implementation 'org.eclipse.jgit:org.eclipse.jgit:6.7.0.202309050840-r'
        implementation 'org.json:json:20210307' 
        implementation 'org.slf4j:slf4j-api:1.7.36'
        implementation 'org.slf4j:slf4j-nop:1.7.36'
        implementation 'org.slf4j:slf4j-simple:2.0.6'
        implementation 'org.apache.commons:commons-io:1.3.2'

    
    
}


task runJava(type: JavaExec) {
    main = 'ExportENV' // Add your main class to execute
    classpath = sourceSets.main.runtimeClasspath
    
    doFirst  {       
        def botname = project.getProperty('BotName')
        def env = project.getProperty('env')
        def exportType = project.getProperty('exportType')
        println "Chosen Value of BotName: $BotName"
        println "Chosen Value of ENV : $env"
        println "Chosen Value of Export Type : $exportType"
        
        args botname, exportType, env
       
    }
    
}
task runJavaI(type: JavaExec) {
    main = 'UI' // Add your main class to execute
    classpath = sourceSets.main.runtimeClasspath

    doFirst  {       
        // def gitTag = project.getProperty('Git_Tag')
        def env = project.getProperty('env')
        def importType = project.getProperty('importType')
        println "Chosen Value of ENV : $env"
        println "Chosen Value of Export Type : $importType"
        // println "Chosen Value of gitTag : $Git_Tag"
        args importType, env
}
}
